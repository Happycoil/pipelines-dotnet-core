# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  artifactName: 'drop'
  webAppName: 'tmr-sample-app'
  resourceGroupName: 'sample-app-rg'
  azureSubscriptionName: 'tmr-msdn'
  prodEnvName: 'SampleWebApp-prod'

stages:
- stage: Infrastructure
  jobs:
   - job: ProvisionAzureInfrastructure
     pool:
       vmImage: 'Ubuntu-16.04'
     continueOnError: false
     steps:
     - task: AzurePowerShell@4
       displayName: Deploy Web App ARM Template to $(resourceGroupName)
       inputs:
         azureSubscription: '$(azureSubscriptionName)'
         ScriptType: 'InlineScript'
         Inline: |
           $params = @{
             ResourceGroupName = '$(resourceGroupName)'
             TemplateFile = '$(Build.Repository.LocalPath)/ARM/continuousDeployment.json'
             webAppName = '$(webAppName)'
           }
           New-AzResourceGroupDeployment @params
         FailOnStandardError: true
         azurePowerShellVersion: 'LatestVersion'

- stage: Build
  jobs:
  - job: BuildAndPublishArtifact
    pool:
      vmImage: 'Ubuntu-16.04'
    continueOnError: false
    steps:
    - task: DotNetCoreCLI@2
      displayName: Build Project
      inputs:
        command: build
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration)'
    - task: DotNetCoreCLI@2
      displayName: Generate Build Artifact
      inputs:
        command: publish
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: true
    - publish: $(Build.ArtifactStagingDirectory)
      artifact: $(artifactName)

- stage: Deploy
  jobs:
  - deployment: Production
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: '$(prodEnvName)'
    strategy:
     runOnce:
       deploy:
         steps:
         - pwsh: gci -recurse
         - task: AzureWebApp@1
           displayName: Deploy Webapp To Production
           inputs:
             azureSubscription: '$(azureSubscriptionName)'
             appType: webApp
             appName: '$(webAppName)'
             package: $(Pipeline.Workspace)/*.zip