# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  artifactName: 'drop'
  webAppName: 'tmr-sample-app'
  resourceGroupName: 'sample-app-rg'
  azureSubscriptionName: 'tmr-msdn'
  prodEnvName: 'SampleWebApp-prod'
  Sytem.Debug: true

stages:
- stage: Build
  jobs:
  - job: BuildAndPublishArtifact
    pool:
      vmImage: 'Ubuntu-16.04'
    continueOnError: false
    steps:
    - task: DotNetCoreCLI@2
      displayName: Build Project
      inputs:
        command: build
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration)'
    - task: DotNetCoreCLI@2
      displayName: Generate Build Artifact
      inputs:
        command: publish
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: true
    - publish: $(Build.ArtifactStagingDirectory)
      artifact: $(artifactName)
- stage: Deploy
  jobs:
  - job: DeployWebApp
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: $(artifactName)
        path: $(Build.SourcesDirectory)/bin
    - task: AzureRmWebAppDeployment@4
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'tmr-msdn'
        appType: 'webApp'
        WebAppName: 'tm-test-app'
        packageForLinux: $(Build.SourcesDirectory)/bin/*.zip
- stage: Pentest
  jobs:
    - job: RunOWASPZap
      pool:
        vmimage: 'ubuntu-latest'
      steps:
      - task: owaspzap@1
        inputs:
          scantype: 'targetedScan'
          url: 'https://tm-test-app.azurewebsites.net/'
          port: '443'
      - bash: |
          sudo npm install -g handlebars-cmd
      
          cat <<EOF > owaspzap/nunit-template.hbs
          {{#each site}}
      
          <test-run
              id="2"
              name="Owasp test"
              start-time="{{../[@generated]}}"  >
              <test-suite
                  id="{{@index}}"
                  type="Assembly"
                  name="{{[@name]}}"
                  result="Failed"
                  failed="{{alerts.length}}">
                  <attachments>
                      <attachment>
                          <filePath>owaspzap/report.html</filePath>
                      </attachment>
                  </attachments>
              {{#each alerts}}<test-case
                  id="{{@index}}"
                  name="{{alert}}"
                  result="Failed"
                  fullname="{{alert}}"
                  time="1">
                      <failure>
                          <message>
                              <![CDATA[{{{desc}}}]]>
                          </message>
                          <stack-trace>
                              <![CDATA[
          Solution:
          {{{solution}}}
      
          Reference:
          {{{reference}}}
      
          instances:{{#each instances}}
          * {{uri}}
              - {{method}}
              {{#if evidence}}- {{{evidence}}}{{/if}}
                              {{/each}}]]>
                          </stack-trace>
                      </failure>
              </test-case>
              {{/each}}
              </test-suite>
          </test-run>
          {{/each}}
          EOF
        displayName: 'owasp nunit template'
        condition: always()
      - bash: ' handlebars owaspzap/report.json < owaspzap/nunit-template.hbs > owaspzap/test-results.xml'
        displayName: 'generate nunit type file'
        condition: always()
      - task: PublishTestResults@2
        displayName: 'Publish Test Results **/TEST-*.xml'
        inputs:
          testResultsFormat: NUnit
          testResultsFiles: 'owaspzap/test-results.xml'
        condition: always()