parameters:
- name: url
  type: string
- name: port
  type: string
- name: aggressive
  type: boolean

steps:
- pwsh: |
    $zapScript = 'zap-baseline.py'
    if ("${{ parameters.aggressive }}" -eq 'True') {
      $zapScript = 'zap-full-scan.py'
    }
    $null = New-Item -ItemType Directory -Path "$(System.DefaultWorkingDirectory)/owaspzap"
    /usr/bin/docker run -u 0 -v $(System.DefaultWorkingDirectory)/owaspzap:/zap/wrk/:rw owasp/zap2docker-stable $zapScript -t ${{ parameters.url }}:${{ parameters.port }} -J report.json -r report.html
    sudo npm install -g handlebars-cmd

    Set-Content -Path ./owaspzap/nunit-template.hbs -Value (@'
    {{#each site}}

    <test-run
        id="2"
        name="Owasp test"
        start-time="{{../[@generated]}}">
        <test-suite
            id="{{@index}}"
            type="Assembly"
            name="{{[@name]}}"
            result="Failed"
            failed="{{alerts.length}}">
            <attachments>
                <attachment>
                    <filePath>$(System.DefaultWorkingDirectory)/owaspzap/report.html</filePath>
                </attachment>
            </attachments>
        {{#each alerts}}<test-case
            id="{{@index}}"
            name="{{alert}}"
            result="Failed"
            fullname="{{alert}}"
            time="1">
                <failure>
                    <message>
                        <![CDATA[{{{desc}}}]]>
                    </message>
                    <stack-trace>
                        <![CDATA[
    Solution:
    {{{solution}}}

    Reference:
    {{{reference}}}

    instances:{{#each instances}}
    * {{uri}}
        - {{method}}
        {{#if evidence}}- {{{evidence}}}{{/if}}
                        {{/each}}]]>
                    </stack-trace>
                </failure>
        </test-case>
        {{/each}}
        </test-suite>
    </test-run>
    {{/each}}
    '@)

    Get-Content -Raw -Path ./owaspzap/nunit-template.hbs | handlebars owaspzap/report.json > owaspzap/test-results.xml
    (Get-Content -Raw -Path ./owaspzap/test-results.xml) -split '<\/test-run>' | ForEach {
      if(($_).Trim() -notmatch '^$'){
        Set-Content -Path $resTmpFile -Value "$_</test-run>"
      }
    }
    Remove-Item -Path ./owaspzap/test-results.xml
  displayName: 'Run OWASP ZAP'
- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFormat: NUnit
    testResultsFiles: 'owaspzap/test-results-*.xml'
    mergeTestResults: true
    testRunTitle: OWASP ZAP Test Results
  condition: always()